/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.markusf.shout.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.markusf.shout.model.Shout;
import de.markusf.shout.model.ShoutModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Shout service. Represents a row in the &quot;Shout_Shout&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.markusf.shout.model.ShoutModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoutImpl}.
 * </p>
 *
 * @author Markus Feindler
 * @see ShoutImpl
 * @see de.markusf.shout.model.Shout
 * @see de.markusf.shout.model.ShoutModel
 * @generated
 */
public class ShoutModelImpl extends BaseModelImpl<Shout> implements ShoutModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a shout model instance should use the {@link de.markusf.shout.model.Shout} interface instead.
	 */
	public static final String TABLE_NAME = "Shout_Shout";
	public static final Object[][] TABLE_COLUMNS = {
			{ "shoutId", Types.BIGINT },
			{ "senderId", Types.BIGINT },
			{ "scopeId", Types.BIGINT },
			{ "publishDate", Types.TIMESTAMP },
			{ "message", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Shout_Shout (shoutId LONG not null primary key,senderId LONG,scopeId LONG,publishDate DATE null,message VARCHAR(255) null)";
	public static final String TABLE_SQL_DROP = "drop table Shout_Shout";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.markusf.shout.model.Shout"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.markusf.shout.model.Shout"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.markusf.shout.model.Shout"),
			true);
	public static long SCOPEID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.markusf.shout.model.Shout"));

	public ShoutModelImpl() {
	}

	public long getPrimaryKey() {
		return _shoutId;
	}

	public void setPrimaryKey(long primaryKey) {
		setShoutId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_shoutId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Shout.class;
	}

	public String getModelClassName() {
		return Shout.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("shoutId", getShoutId());
		attributes.put("senderId", getSenderId());
		attributes.put("scopeId", getScopeId());
		attributes.put("publishDate", getPublishDate());
		attributes.put("message", getMessage());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long shoutId = (Long)attributes.get("shoutId");

		if (shoutId != null) {
			setShoutId(shoutId);
		}

		Long senderId = (Long)attributes.get("senderId");

		if (senderId != null) {
			setSenderId(senderId);
		}

		Long scopeId = (Long)attributes.get("scopeId");

		if (scopeId != null) {
			setScopeId(scopeId);
		}

		Date publishDate = (Date)attributes.get("publishDate");

		if (publishDate != null) {
			setPublishDate(publishDate);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}
	}

	public long getShoutId() {
		return _shoutId;
	}

	public void setShoutId(long shoutId) {
		_shoutId = shoutId;
	}

	public long getSenderId() {
		return _senderId;
	}

	public void setSenderId(long senderId) {
		_senderId = senderId;
	}

	public long getScopeId() {
		return _scopeId;
	}

	public void setScopeId(long scopeId) {
		_columnBitmask |= SCOPEID_COLUMN_BITMASK;

		if (!_setOriginalScopeId) {
			_setOriginalScopeId = true;

			_originalScopeId = _scopeId;
		}

		_scopeId = scopeId;
	}

	public long getOriginalScopeId() {
		return _originalScopeId;
	}

	public Date getPublishDate() {
		return _publishDate;
	}

	public void setPublishDate(Date publishDate) {
		_publishDate = publishDate;
	}

	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	public void setMessage(String message) {
		_message = message;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Shout.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Shout toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Shout)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ShoutImpl shoutImpl = new ShoutImpl();

		shoutImpl.setShoutId(getShoutId());
		shoutImpl.setSenderId(getSenderId());
		shoutImpl.setScopeId(getScopeId());
		shoutImpl.setPublishDate(getPublishDate());
		shoutImpl.setMessage(getMessage());

		shoutImpl.resetOriginalValues();

		return shoutImpl;
	}

	public int compareTo(Shout shout) {
		long primaryKey = shout.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Shout shout = null;

		try {
			shout = (Shout)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = shout.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ShoutModelImpl shoutModelImpl = this;

		shoutModelImpl._originalScopeId = shoutModelImpl._scopeId;

		shoutModelImpl._setOriginalScopeId = false;

		shoutModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Shout> toCacheModel() {
		ShoutCacheModel shoutCacheModel = new ShoutCacheModel();

		shoutCacheModel.shoutId = getShoutId();

		shoutCacheModel.senderId = getSenderId();

		shoutCacheModel.scopeId = getScopeId();

		Date publishDate = getPublishDate();

		if (publishDate != null) {
			shoutCacheModel.publishDate = publishDate.getTime();
		}
		else {
			shoutCacheModel.publishDate = Long.MIN_VALUE;
		}

		shoutCacheModel.message = getMessage();

		String message = shoutCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			shoutCacheModel.message = null;
		}

		return shoutCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{shoutId=");
		sb.append(getShoutId());
		sb.append(", senderId=");
		sb.append(getSenderId());
		sb.append(", scopeId=");
		sb.append(getScopeId());
		sb.append(", publishDate=");
		sb.append(getPublishDate());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("de.markusf.shout.model.Shout");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>shoutId</column-name><column-value><![CDATA[");
		sb.append(getShoutId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>senderId</column-name><column-value><![CDATA[");
		sb.append(getSenderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scopeId</column-name><column-value><![CDATA[");
		sb.append(getScopeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishDate</column-name><column-value><![CDATA[");
		sb.append(getPublishDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Shout.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Shout.class
		};
	private long _shoutId;
	private long _senderId;
	private long _scopeId;
	private long _originalScopeId;
	private boolean _setOriginalScopeId;
	private Date _publishDate;
	private String _message;
	private long _columnBitmask;
	private Shout _escapedModelProxy;
}